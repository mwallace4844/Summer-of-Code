
import arcade
import random


SCREEN_WIDTH = 1200
SCREEN_HEIGHT = 700
PACE = 8

class Game(arcade.View):

    def __init__(self):
        #List of the names of ice cream images
        self.ICEPICS = ["images/cherry.png", "images/chocolate.png", "images/cherry2.png", "images/smores.png", "images/cherry.png", "images/chocolate.png", "images/cherry2.png", "images/smores.png"]
        super().__init__()
        arcade.set_background_color(arcade.color.APRICOT)
        #self.window.set_mouse_visible(False)

        self.alex = None
        self.conveyor = None

        self.icecream_list = None
        self.bowl_sprites = None
        self.carrying = None

        self.table_list = None

        self.move_sound = None
        self.time_formatted = ""

        self.time = 0


    def setup(self):
        #Create sprites
        self.alex = arcade.Sprite("images/alex.png", scale = .15, center_x = SCREEN_WIDTH / 2, center_y = SCREEN_HEIGHT / 2)
        self.conveyor = arcade.Sprite("images/conveyor.png", scale = .7, center_x=200, center_y=28)

        #Create lists
        self.bowl_sprites = arcade.SpriteList()
        self.carrying = []
        self.icecream_list = arcade.SpriteList()
        self.table_list = arcade.SpriteList()

        self.remaining = len(self.ICEPICS)

        #Create dictionaries to keep track of which ice creams have been eaten.
        self.icecream_dict = {}
        self.bowl_dict = {}

        # Create the table sprites as obstacles.
        # EDIT: change to a square table
        for center in [(120, 400,), (800, 575), (1000, 100)]:
            x, y = center
            table = arcade.Sprite("images/rect_2_table_flipped.PNG", .11 ,center_x=x, center_y=y)
            self.table_list.append(table)
        self.table_list.append(arcade.Sprite("images/rect_2_table.PNG", .15 ,center_x=500, center_y=150))

        #Create the ice cream and bowl sprites.
        while len(self.ICEPICS) != 0:
            x, y = self.return_random_center()

            cone_name = self.ICEPICS[0]
            #Since the ice cream images are not all the same size, they have to be scaled differently.
            if cone_name == "images/cherry.png" or cone_name == "images/smores.png":
                s = .16
            else:
                s = .072

            #If the sprite collides with a table or another ice cream, do not add it.
            ice_cream = arcade.Sprite(cone_name, scale = s, center_x = x, center_y = y)
            on_table = arcade.check_for_collision_with_list(ice_cream, self.table_list)
            on_ice_cream = arcade.check_for_collision_with_list(ice_cream, self.icecream_list)

            if len(on_table) == 0 and len(on_ice_cream) == 0:
                self.icecream_list.append(ice_cream)
                new_bowl_sprite = arcade.Sprite("images/bestbowl.png", scale=.18, center_x=x, center_y=y)
                self.bowl_sprites.append(new_bowl_sprite)

                #Add to the dictionaries.
                self.icecream_dict[ice_cream] = False
                self.bowl_dict[new_bowl_sprite] = ice_cream

                self.ICEPICS.remove(cone_name)

        self.move_sound = arcade.load_sound("audio/swallow.mp3")


    def return_random_center(self):

        x = random.randint(100, SCREEN_WIDTH - 100)
        y = random.randint(100, SCREEN_HEIGHT - 100)
        return (x,y)

    def on_draw(self):
        arcade.start_render()

        #Draw all of the Sprites
        self.conveyor.draw()
        self.bowl_sprites.draw()
        self.icecream_list.draw()
        self.table_list.draw()

        self.alex.draw()

        arcade.draw_text("Scoops remaining: {}".format(self.remaining), 40, 610, arcade.color.BLACK, 20)
        #Display the number of bowls remaining. Not being carried by Alex.
        bowls_touching = arcade.check_for_collision_with_list(self.conveyor, self.bowl_sprites)
        bowls_on_conveyor = 0
        for _bowl in bowls_touching:
            if _bowl not in self.carrying:
                bowls_on_conveyor += 1
        arcade.draw_text("Bowls remaining: {}".format(8 - bowls_on_conveyor), 40, 570, arcade.color.BLACK, 20)

        #Display the time elapsed nicely
        minutes = int(self.time) // 60
        seconds = int(self.time) % 60
        self.time_formatted = "{:02d}:{:02d}".format(minutes, seconds)

        arcade.draw_text("Time elaspsed: {}".format(self.time_formatted), 40, 650, arcade.color.BLACK, 20)



    def on_update(self, time):
        self.alex.update()
        for bowl in self.carrying:
            bowl.update()

        #https://github.com/jiinjeong/SoC/blob/master/Project1Diner/program.py
        self.time += time

        # Check if the bowls are on the conveyor belt or not
        self.on_conveyor = arcade.check_for_collision_with_list(self.conveyor, self.bowl_sprites)

        # If all ice cream is eaten and the bowls are on the conveyor belt, display the end page.
        if len(self.on_conveyor) == len(self.bowl_sprites) and len(self.carrying) == 0 and len(self.icecream_list) == 0:
            end_view = Win_Page(self.time_formatted)
            self.window.show_view(end_view)

        #If you run into a table, you lose
        obstacle = arcade.check_for_collision_with_list(self.alex, self.table_list)
        if len(obstacle) != 0:
            new_view = Lose_Page("Watch out! You tripped over a table!")
            self.window.show_view(new_view)

    def on_key_press(self, key, mod):

        if key == arcade.key.LEFT:
            self.alex.change_x = -PACE
            for bowl in self.carrying:
                bowl.change_x = -PACE
        elif key == arcade.key.RIGHT:
            self.alex.change_x = +PACE
            for bowl in self.carrying:
                bowl.change_x = +PACE
        elif key == arcade.key.DOWN:
            self.alex.change_y = -PACE
            for bowl in self.carrying:
                bowl.change_y = -PACE
        elif key ==arcade.key.UP:
            self.alex.change_y = +PACE
            for bowl in self.carrying:
                bowl.change_y = +PACE

        if key == arcade.key.E:
            #You lose if you try to eat while carrying bowls.
            if len(self.carrying) != 0:
                new_view = Lose_Page("Alex can't eat while carrying a bowl!")
                self.window.show_view(new_view)

            else:
                self.eat_up = arcade.check_for_collision_with_list(self.alex, self.icecream_list)
                for cone in self.eat_up:
                    self.icecream_list.remove(cone)
                    self.icecream_dict[cone] = True
                    arcade.play_sound(self.move_sound)
                    # self.cream_carrying = cone
                    self.remaining -= 1

        if key == arcade.key.P:
            self.pick_up = arcade.check_for_collision_with_list(self.alex, self.bowl_sprites)

            #The ice cream must be eaten before picking up the bowl
            for bowl in self.pick_up:
                ice_cream_sprite = self.bowl_dict[bowl]
                if self.icecream_dict[ice_cream_sprite] == True:
                    #So as not to add the same sprite twice, causing it to move faster.
                    if not bowl in self.carrying:
                        self.carrying.append(bowl)
                else:
                    pass
                    new_view = Lose_Page("You can't clear the bowl without eating the ice cream!")
                    self.window.show_view(new_view)

        if key == arcade.key.D and len(self.carrying) != 0:
            self.carrying.clear()


    def on_key_release(self, key, mod):
        if key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.alex.change_x = 0
            for bowl in self.carrying:
                bowl.change_x = 0
        elif key == arcade.key.DOWN or key ==arcade.key.UP:
            self.alex.change_y = 0
            for bowl in self.carrying:
                bowl.change_y = 0


class Instructions(arcade.View):

    def on_show(self):
        arcade.set_background_color(arcade.color.LAVENDER)

    def on_draw(self):
        arcade.start_render()
        arcade.draw_text("Clear the bowls to the conveyor as fast as possible!", 100, SCREEN_HEIGHT // 1.75, arcade.color.BLACK, 35)
        arcade.draw_text("E: eats ice cream", 475, 325, arcade.color.BLACK, 30)
        arcade.draw_text("P: picks up a bowl", 470, 275, arcade.color.BLACK, 30)
        arcade.draw_text("D: drops a bowl", 480, 225, arcade.color.BLACK, 30)
        arcade.draw_text("Welcome", SCREEN_WIDTH // 3, SCREEN_HEIGHT // 1.5, arcade.color.BLACK, 80)
        arcade.draw_text("Press SPACE to start", SCREEN_WIDTH // 2.4, SCREEN_HEIGHT // 6, arcade.color.BLACK, 20)


    def on_key_press(self, key, mod):
        if key == arcade.key.SPACE:
            game_view = Game()
            game_view.setup()
            self.window.show_view(game_view)


class Win_Page(arcade.View):

    def __init__(self, time):
        super().__init__()
        arcade.set_background_color(arcade.color.LAVENDER)
        self.time = time

    def on_draw(self):
        arcade.start_render()
        arcade.draw_text("You fed Alex a healthy diet in {}!".format(self.time), SCREEN_WIDTH // 6, SCREEN_HEIGHT // 2,
                         arcade.color.BLACK, 40)
        arcade.draw_text("Congratulations!", SCREEN_WIDTH // 5, SCREEN_HEIGHT // 1.5, arcade.color.BLACK, 80)
        arcade.draw_text("Press SPACE to start", SCREEN_WIDTH // 2.4, SCREEN_HEIGHT // 6, arcade.color.BLACK, 20)

    def on_key_press(self, key, mod):
        if key == arcade.key.SPACE:
            new_view = Game()
            new_view.setup()
            self.window.show_view(new_view)

class Lose_Page(arcade.View):

    def __init__(self, message):
        super().__init__()
        arcade.set_background_color(arcade.color.LAVENDER)
        self.message = message

        if message == "You can't clear the bowl without eating the ice cream!":
            self.x = SCREEN_WIDTH // 16
        elif message == "Alex can't eat while carrying a bowl!" or message == "Watch out! You tripped over a table!":
            self.x = SCREEN_WIDTH // 4.75

    def on_draw(self):
        arcade.start_render()
        arcade.draw_text(self.message, self.x, SCREEN_HEIGHT // 2, arcade.color.BLACK, 36)
        arcade.draw_text("Game Over", SCREEN_WIDTH // 3.2, SCREEN_HEIGHT // 1.5, arcade.color.BLACK, 80)
        arcade.draw_text("Press SPACE to play again", SCREEN_WIDTH // 2.65, SCREEN_HEIGHT // 4, arcade.color.BLACK, 20)

    def on_key_press(self, _key, _mod):
        if _key == arcade.key.SPACE:
            game_view = Game()
            game_view.setup()
            self.window.show_view(game_view)
            arcade.run()


def main():
    window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, "main game")
    beg_view = Instructions()
    window.show_view(beg_view)
    arcade.run()


if __name__ == '__main__':
    main()
